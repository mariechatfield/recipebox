#!/usr/bin/env node
const fs = require('fs');
const https = require("https");
const prettier = require("prettier")

const AUDIT_LOG = 'auditLog.json'
const IGNORED_IDS = 'ignoredIds.json'
const OUTPUT_DIRECTORY = 'recipes'

function mapByUID(resultArray) {
  return resultArray.reduce((memo, data) => 
      ({ ...memo, [data.uid]: data }),
    {})
}

const MOCKED_RESULT = {
  result: [
    {
      hash: '67B1CD5E4F386DEC96ABCA4BA370252921910E5A9E34A8B200C218CE9EE713E0',
      uid: '02988CBC-FBED-4786-A9CE-7CAFB003434B'
    },
    {
      hash: '541C6B5EE68E2CAD154D10832EC363C6A6F09C6E46E72D5EE85CF35087AB9B5E',
      uid: '03B1B92E-327F-479D-A2E1-749079C4DA16'
    },
    {
      hash: '4A224C4BA367E797E6C968D5CD55EBE2B6BB2D2FC2A66ABB22ADD43BB0282FFD',
      uid: '07E66E41-E452-4598-98B1-33408C7F0C93'
    },
    {
      hash: '4A974C7383FCA5621B93923A3BD697796E7D363CA643B3598E4C4BD4FF427CA6',
      uid: '0AB5E703-CE12-4079-953B-F0E5C322182E'
    },
    {
      hash: '12CF3F57A72C00D48FD42FDFE0B9CBBB9D38312C6FB7C16D4501CA8213ABEEFC',
      uid: '0B441070-935F-45DE-91C4-ABA1897DFBF6'
    },
    {
      hash: 'D0220BA4A1679DC69C10E7BF9A6D772F7494DEDDB7E74C5A0B0C6C7C2AC9392B',
      uid: '1124EBDA-D955-4C5B-AAEB-0B4212784FBC'
    },
    {
      hash: '05CDB52BF3A3CB7EA9BD683C480460ED7425CC1F954EA6AB001B6D144F67278B',
      uid: '11890655-BBB6-4D17-8692-623FF561F2F8'
    },
    {
      hash: 'D78826C362B293573B3AA538F7B8DFC901A582C6D8495CB45B7B3D44DADA9668',
      uid: '1ADC0D59-DCA3-46CE-B526-6E785850D9D8'
    },
    {
      hash: '6B520EDA083F295EE862BDA012048D87A9126F45DA646E14DC3FB409A72C5FE9',
      uid: '1CF8192B-5862-40BC-9CC3-AA4E3C10B1A2'
    },
    {
      hash: '4E5DFEE1B69065FCDA6736F807FC3C53B0F96F0C725B52C37DEECA018C554863',
      uid: '1E3FE946-AB37-41C3-9480-BD0424C4CE4D'
    },
    {
      hash: 'A6690D95E7531BC139FED798C6D3833F55E5752E4FAFBA585B67AAB50C9AEBB7',
      uid: '1ECBD92C-4EF8-460B-9153-3A2BB7BA0F2D'
    },
    {
      hash: '395FD828CDD4C72BC6312FD864C377AB1EC8B9F09F0435DEF713C5C1A30180E6',
      uid: '20FD25F5-CA84-44C1-BEC9-61E18A195D08'
    },
    {
      hash: '2E7FF80E95E4E2AF1717A253A0FCB298484FECAE458A0728671746D4C75C79AF',
      uid: '21E55FC1-5907-41B2-B4A5-3F3AD24ABF31'
    },
    {
      hash: '370DB72AA08587BF95CC42D492568F3B50F583E933198218DE45335778199A97',
      uid: '2375DAA8-8919-4476-B32A-0CAB1476DA80'
    },
    {
      hash: '693590AFF45FC8FD0E0F3D007C1B21621258CF9F6A4AA689EB060119785FC6FD',
      uid: '23CCAB76-8D94-4032-9B68-EBD28BEDE251'
    },
    {
      hash: '03C4543C9F3A1E5629C4171B3CCA940DA7320F18FB24F111717CD38E76C97BEA',
      uid: '2732F9CB-DEC6-414E-89B6-B24C049ED937'
    },
    {
      hash: 'A37626C1F3CCBEBE71FAFB492712007A1906A1FC72133673B174DCBF9D110099',
      uid: '32C9B5CF-7BE2-4997-9F9E-2379E3C065AC'
    },
    {
      hash: '754088EFA5445760D3C1B9D0411423BADB549F6A1CE7A153E2EF7A867DCC3444',
      uid: '35DEF077-F7B3-4725-B58C-7DC1E24B121C'
    },
    {
      hash: 'A7393751695BB1F37058F0B96222B8832EB77EBA039A60E5E55DDDD033829F34',
      uid: '36773691-EDB0-4070-831F-0AD7ED9E9F50'
    },
    {
      hash: 'A4131CB74EEB4B97D2DC4ED9AE3A168E7EA3E8CD7DE664584926DE6916593EC5',
      uid: '36B12FB7-2BC1-4FEC-8375-4642B6F9F6CC'
    },
    {
      hash: '1240BB8AB186A62DA58A776C95F93CD8C11250EB298C0673306A6031BB6CE090',
      uid: '374A7DBC-B55D-44E9-B1C5-F46EAF4FF811'
    },
    {
      hash: '2A21ED3147760B26F8FA691C1318F2812B88EAEFB4104B44101C6C094F76FCB3',
      uid: '3FA9E401-1F59-41D1-B990-1728F5843CD6'
    },
    {
      hash: 'CEBF626FD29088A3109DBD777E32D38205D1ED084DA47EA0771E0639895C3822',
      uid: '408DB3B3-65A3-491D-89F8-328AD57203FA'
    },
    {
      hash: 'AA14CDEC19D7495E5EB496E06BB996DDFF8B22F6660F2A5228153B6ECFEB10D3',
      uid: '4C8786B8-3621-47B4-A577-EE939E8E2A9E'
    },
    {
      hash: '22DFBFB03A7944E81C1F9621BD67ED71F38F863D943B393635F897A104AA0991',
      uid: '4FA2D228-9349-44B6-B33C-D9E9AFE1FD16'
    },
    {
      hash: 'C6E867CBF962C6EC180C797618BF6D552FFB940CF3C26D2FA4ADB304E4A06F1B',
      uid: '5356F7B7-B1CD-4FBA-838B-9D5562A3A486'
    },
    {
      hash: '05E4E3FCD81D2AD4A6C4BAF0444D0E778E39631D080BD2C8CAC8F7063A7714FB',
      uid: '5491821E-0EA7-4F4A-BAEF-94D7502231B8'
    },
    {
      hash: '46759583E7D7ADA5FE06FEE8EB9A1178CCB392CFB115936A17C4C5B982F4AF16',
      uid: '57ECF825-6EEB-4315-8C85-3CC6C0029581'
    },
    {
      hash: '5EF6891A714CE3756F209844A6147AE3A77D6A43FABA3712AE24222CA7574BFD',
      uid: '59E59FBE-0033-433D-8DDD-C583BC485FDB'
    },
    {
      hash: 'D235EE296CD8A317ADBA7AA41469DE20D038FE738F04F9778777A6CFC8E02BC3',
      uid: '5CDCC3D3-14A3-48C1-939A-E4B28764B99C'
    },
    {
      hash: 'AE10487F24F8D716ECFFED8D7F79905FCEF22C4805F0F41FCEE9F366B88BB555',
      uid: '611A58F1-E421-4E67-AE71-969B89AE6A9E'
    },
    {
      hash: 'A76E79FFF0ABF7ADEAC2FB2EE1046C00E5E81D3D1CAFC361B4293DEF35DAD016',
      uid: '65EB04A9-10E5-4F0C-B897-72EA82BFF669'
    },
    {
      hash: '3466E3A26DE607007A0EBF92236894080959ACB2A4F8706B19E1F02662C4D751',
      uid: '68407CC9-8A4B-4869-8CED-4A864B53C18F'
    },
    {
      hash: '47D94B570F1B50A6E72D594EA5436F1FD6C4D353FCFD71A7701E509D598FB991',
      uid: '72651845-B4F3-477C-949C-C519579A9A4A'
    },
    {
      hash: 'AA601C9FD098EC3A2D09CE6A5F309A163EFF210040F8D260BFD8A42DFE22AE97',
      uid: '72D8E5B9-6B73-4758-AF29-9F52D0A13312'
    },
    {
      hash: 'BF55F9E4606C1FD9890A3EDA6452F80A61EFD2D92DA36D76F90D3F0B4630D2A3',
      uid: '7407AADE-6715-4CC4-A5A1-3C5EED3A3839'
    },
    {
      hash: 'A0F29D9CF4865A2CB91D98F141510E4E10B7EE64B7D6790ECBAFD63D2FF74CD3',
      uid: '79E83BE5-3D7C-4D86-9162-C48F5034B87E'
    },
    {
      hash: '7684FA75025C7B6C4C10C3CAC61EB9736721B63BEE5B24FAC6F2C524D82453D8',
      uid: '7FCBA728-DAB6-4543-997A-A5073AE700A7'
    },
    {
      hash: '2C7B3E215BE99A0C6CAD6AD0DE11833D6391B3F6DA5615ED381BF308CBE5C5D9',
      uid: '7FE8A866-F6A1-4F90-89CC-9AE24932A6E6'
    },
    {
      hash: '0D4B39A3EFD3E69F426D477D2D9873E4BCD695D5CBFC906E5FBF738A4581404C',
      uid: '82BE6347-AE4F-4557-A35E-3605F3AEA9AB'
    },
    {
      hash: 'C97EECDC0F0E752E82B3919EB300664A5632F0384453470A72B48D2B127A893A',
      uid: '84D096BE-BA89-48B8-9BA8-1AB429F3EDAB'
    },
    {
      hash: 'A91817AA8683B98BC4A32D0F13F9110DC058295D2B03C73BA646311E1D349D0C',
      uid: '898ADA04-C796-4E3B-BA33-01B8F2B6C6DC'
    },
    {
      hash: 'A1D46E1C40F849A654890DA56C387D68339514467B1BF181BC4C5E262AB66697',
      uid: '8BD2AEC5-6A28-4BD8-BB7E-E2767342A787'
    },
    {
      hash: 'A2BAD4085FCBC6166E1D5B612F2AE49A95A8806E442579980004968D9390B7AE',
      uid: '8BF8EE61-7625-46E6-94F2-E0951B38F60C'
    },
    {
      hash: '35BDF77F3BE00DE72FA1E938E2BA32148854C214AE09FF71F4E60E6173D05133',
      uid: '8C804209-672E-47D3-8C97-761AAF4174B2'
    },
    {
      hash: '0CAFCD5CBF210CC338B8AEC1216167F1321133F0C133A3F453062AA3FD43F058',
      uid: '8CDDC905-C5B2-44A6-AB86-EE5DB4351E50'
    },
    {
      hash: 'F24505A412EA00EF5BE89BEED82E3D277E3EDD257B1FDA6F477334F29B18B673',
      uid: '8E77CDBB-BBFF-4762-8C06-95E339A8F455'
    },
    {
      hash: '1E5EF9210D4CB4C63725B662DA4FDF819CA2C10BDCBAA3060924E40D2B3FAF10',
      uid: '91418F7D-444A-4CEA-8BE2-89F1A4FB46AC'
    },
    {
      hash: 'A2BC558FED2275405B302BABB93BACE9720043A5057C87D07E7EAFCCE490AD34',
      uid: '9180B4F6-E664-43AE-AA9A-C488F497887B'
    },
    {
      hash: '6A11C89D56B954BB9AA6886DDDA687E50944937E722A103C8350639146028189',
      uid: '91C676C1-1940-4888-897F-83DE437B6B8C'
    },
    {
      hash: '6EE3B0ADE7212EA5A14D8AA7AF03BF568DA6F237A9A212E888DCD73D09845F91',
      uid: '92563154-CD92-475E-897C-15076E7C6000'
    },
    {
      hash: '1B63AA33A70F360DA2FCA900DED83F47E3FD1598C0840E9D84FD2BFFD27DDDE7',
      uid: '96FDDD50-5902-4B74-A1CB-52483D7598D8'
    },
    {
      hash: 'BE1846DA2DB95980570422E1FBE8AF4060C6CB0D38417295952D9EBEC88C4442',
      uid: '97DF608B-962D-4511-BD55-7805845F0113'
    },
    {
      hash: '91FD05EB720CABB2C19B502BED5D720737AC3C99368B850D692778A9E96258B5',
      uid: '9F72EE09-842F-4EE9-BF72-DF3F67C690FD'
    },
    {
      hash: 'C682BEB594A535B88466C36C0DD8241E665B086FFA4FB7C87DD4335B93E51481',
      uid: 'A2CBBC17-EE9C-4D16-BBF4-C1BD68D3E1B3'
    },
    {
      hash: 'C68DA27DD0018F46EF63377837195E0A275EDACC3F619B3EE07CA47EEF77B900',
      uid: 'A6A7E764-00BB-4E8E-BB2B-FC073F916AB3'
    },
    {
      hash: 'FE5242E6FA571251CFED2B2DF436A28A935402DE3A210E5C70DB7439C001F84B',
      uid: 'A8B00B9E-610E-4511-A704-D096E95ACB86'
    },
    {
      hash: '76C21BF5B42C0F3077F3E2432FDA2519D58B15643639F535CE98204CA811A421',
      uid: 'A8E4181B-4EA2-4A37-A227-BEF18980423E'
    },
    {
      hash: 'AB73AFFB2266931A5FC84BB44D8A0C4D51F077EB01EDCA4D1E7946D37908EDBB',
      uid: 'AC45BB10-0CF0-4073-B302-746F5C0EC7CD'
    },
    {
      hash: '304F668BB7A43E56107E2177525691D8E8DF8C7CC60ECC83E33FD4F5F8AA784C',
      uid: 'B2A39F37-37F5-45C7-A955-FCB2D35A0465'
    },
    {
      hash: 'C740A89F21204905D8E620BEB3CD9C188E0FC88902327D71D09F72CF89088402',
      uid: 'B37F4EA1-D418-4DFD-892E-A8970281CD8F'
    },
    {
      hash: '3DAF3A0395EBA3BC1841B969E4004BC74D54A52E3F67D5C0777FA60273E481F3',
      uid: 'B87F9362-72E9-4A0D-B176-6B00D702C675'
    },
    {
      hash: '332E356DB294011081AFE0EA12C4E07D37E2F68F5B0A4707FA48F327A98F6435',
      uid: 'B9BC7D6A-5650-4A2F-9E70-76458C5FB205'
    },
    {
      hash: 'A60B3DBE27521FC4E9EFD943AFF17AC3D50F0A64C8B45858FBFDE699BC4F2C59',
      uid: 'BA0FCE47-78A2-4F4F-9B92-6EF591A5C16B'
    },
    {
      hash: 'BADE14E290F4FAC248868BACAE80661A1A05BE1BFFD87E3CA33CC76BA84541DF',
      uid: 'BA80FDD0-8792-465B-B9B8-AD9673876F80'
    },
    {
      hash: '0CD0A4B81F6B8CCF95431D90328EA505C0A6D4A9F45285CFE1E28949269EC4F7',
      uid: 'BAAFDCFE-9CD3-4D9F-972F-CD9F0257786D'
    },
    {
      hash: '5CC8AEC29BDDC57569BCAA28B22FD6E1DCA62CDBC6B2B5B287F50B7E4730612D',
      uid: 'BC62E724-EE0A-41EE-8EC4-A845974ECCC0'
    },
    {
      hash: '7F2694B97B97B865822960831F548DFC70367B081890A251E4AF45454CE002CF',
      uid: 'BDDA7750-6055-4F26-B9E8-0D3575C6031A'
    },
    {
      hash: 'FFD5E40C6A2C4C0A6246B1BCF10BC8FEEF53026A15E59A3696522C19BCAC0CAF',
      uid: 'BEDEEBA3-C385-42EF-BAF6-D47A11EEB2E9'
    },
    {
      hash: 'D7E65CCC229D7A4ACAF58E70C43B8DD35DF1BA71EC638DA3AAAAD343AFB2B2C4',
      uid: 'C0341FAB-E698-4091-A0D7-2CAE8A872B99'
    },
    {
      hash: 'AD89C02D6486A95C918710CF5220BC797F0EE949FCAA195017F0C1C3B17DC6D7',
      uid: 'C0FF309B-46B4-450C-ADB3-2F37AC9336CB'
    },
    {
      hash: 'A9F110608B4AA40DE74519A3BAD4FFF64888F9401FDAFEC73C6C6B352ECAB197',
      uid: 'C336C10C-90C4-4F68-8D64-7A0FD20A5BC2'
    },
    {
      hash: '46D1A9A9720A281673A563F9755CCB54F1E0CA34B7F105582A9A0EC83ED61997',
      uid: 'C7A375A8-81C9-4469-8E1A-BE5E16D50CCB'
    },
    {
      hash: '024A06AF705A021F756C3EE5210AC1EB8A17B635DCC5AF7FE70E84B0E89D124B',
      uid: 'CE2D64A6-0918-43E9-8737-A3FFF4480564'
    },
    {
      hash: '75DF91D8A4FA3B01F8B6A45C88E504827CC5466F54CE2634380BE32462DEA981',
      uid: 'D238D88F-F23E-4F31-B8D3-21DD8714A282'
    },
    {
      hash: '59E9AA2D5F530CABA94230839BA1B269D1F1FA51928DF5122C2E3CB8B1C8134A',
      uid: 'D442FA69-0191-4104-9391-E049B7EB7AE3'
    },
    {
      hash: '4164B147B69F4992FBF4C223AA039839880D7CC38F5697E3D5CE95CDC1677377',
      uid: 'D4451159-2DE2-4D19-9C88-CD1CB2A525FB'
    },
    {
      hash: '7C11862FF15E6DC1706A1BC8F011B21E1D10B14F18A77494ACAD5EBEE24CFAFB',
      uid: 'D484907C-DA38-4C3C-BE8A-22345A6F4B4F'
    },
    {
      hash: 'E2AEAE2EDE5608B490A4376E8E236C7D8C567A44B2C2CE9515D651FEF8BC680E',
      uid: 'D7C901C6-4180-41B3-A591-B989991A4891'
    },
    {
      hash: '5E7A348201319B087254A96D16094379AB1FE60654F32526751A7B95440F17AF',
      uid: 'DE79E163-6B61-49F5-967E-A5B5390488F4'
    },
    {
      hash: '06937F09E633314917B109A48179993122F0DBA6011BD17EDD6B7F3786FD2B06',
      uid: 'EA0F3786-2DF9-45FA-8D63-6A8642D78E62'
    },
    {
      hash: '9ED9B0C3844FCE835C3503DF23D5639C7EC44846310F340C799745E75D26DBA3',
      uid: 'ED1D6326-A62F-4DD0-A2FC-9E2B3065C2E3'
    },
    {
      hash: '6CBBAD4A6848A1CD4FBA5E9E70C88F267A8B211D709E6C3FEA87706B3E892008',
      uid: 'EE7A8B4C-BCA4-42C4-A44E-A46CB734D620'
    },
    {
      hash: '7153CABB0D60A9F546084243EA3A1337C647DB40E8E56DB31FC72EC7C2B84A58',
      uid: 'EF8A3A52-5248-4768-996D-F98283360B7F'
    },
    {
      hash: '57D60673B3DFBFD3DEAA01671178284BADE0644E9E0AC3B1A3D89A9AABABE5C8',
      uid: 'F3C0528F-F84B-4EBF-8EC3-1358B7F50845'
    },
    {
      hash: '333C5DB58A9137797E6290FBDAFDA110B31D70F8D008AF10CC19B5F8D8D0957D',
      uid: 'F9A8EDB9-4656-4FD0-86FC-A2A1311BFC75'
    },
    {
      hash: '53F87F6E7FB3EB16F797E9DB3A8BBAE46EB467C87660071304C04FD53DE84D17',
      uid: '1F5D79CC-2A6D-493A-A1A8-99792DAF2A46'
    }
  ]
}

const PAPRIKA_AUTH = `${PAPRIKA_USERNAME}:${PAPRIKA_PASSWORD}`

const PAPRIKA_API = "https://www.paprikaapp.com/api/v1/sync";
const HEADERS = {
  Authorization: `Basic ${Buffer.from(PAPRIKA_AUTH).toString('base64')}`
}

let categories = null

function getPaprika(path) {
  return new Promise((resolve, reject) => {
    // According to the API, all resources are directories
    https.get(`${PAPRIKA_API}/${path}/`, { headers: HEADERS }, (res) => {
      let rawData = ''
      if (res.statusCode !== 200) {
        reject(res.statusCode);
        return
      }
      res.on('data', (d) => {
        rawData += d
      })
      res.on('end', () => {
        resolve(JSON.parse(rawData))
      })
    })
  })
}

async function getAllRecipes() {
  const response = MOCKED_RESULT // await getPaprika('recipes')
  return mapByUID(response.result)
}

function getChanges(syncedRecipes) {
  const toDelete = []
  const toUpdate = []
  const toCreate = []
  const noOp = []

  const knownRecipes = JSON.parse(fs.readFileSync(AUDIT_LOG, { encoding: 'utf-8' }))
  const ignoredIds = JSON.parse(fs.readFileSync(IGNORED_IDS, { encoding: 'utf-8' }))

  Object.keys(syncedRecipes).forEach((uid) => {
    const syncedRecipe = syncedRecipes[uid]

    if (uid in knownRecipes) {
      const knownRecipe = knownRecipes[uid]

      if (syncedRecipe.hash === knownRecipe.hash) {
        noOp.push(knownRecipe)
      } else {
        toUpdate.push(knownRecipe)
      }
    } else {
      if (uid in ignoredIds) {
        console.log(`Ignoring ${uid} because "${ignoredIds[uid].reason}"`)
      } else {
        toCreate.push(syncedRecipe)
      }
    }
  })

  Object.keys(knownRecipes).forEach((uid) => {
    const knownRecipe = knownRecipes[uid];

    if (uid in syncedRecipes) {
      // Handled in previous loop
    } else {
      toDelete.push(knownRecipe)
    }
  })

  return { toDelete, toUpdate, toCreate, noOp }
}

async function getCategories() {
  if (categories) {
    return categories
  }

  const response = await getPaprika('categories')  
  categories = mapByUID(response.result)
  return categories
}

async function createRecipe(recipeId) {
  const response = await getPaprika(`recipe/${recipeId}`)

  if (response.error) {
    throw new Error(response.error.message)
  }

  const recipe = response.result

  const safeRecipeName = recipe.name
    // Strip out apostrophes and periods
    .replace(/['’.]/g, '')
    // Any non-alpha character becomes an underscore
    .replace(/[^\w]/g, '_')
    // Strip out multiple underscores in a row
    .replace(/_+/g, '_');
  
  const knownCategories = await getCategories()
  recipe.categories = recipe.categories.map(categoryId => knownCategories[categoryId].name)

  return new Promise((resolve) => {
    fs.writeFile(
      `${OUTPUT_DIRECTORY}/${safeRecipeName}.json`, 
      prettier.format(JSON.stringify(recipe), { filepath: '.json' }), 
      { encoding: 'utf-8' },
      () => resolve()
    )
  })
}

async function handleCreates(recipesToCreate) {
  if (recipesToCreate.length === 0) {
    console.log('No recipes to create!')
    return
  }

  console.log(`Creating ${recipesToCreate.length} recipes...`)

  await Promise.all(recipesToCreate.map((recipe) => createRecipe(recipe.uid)))
}

async function handleDeletes(recipesToDelete) {
  if (recipesToDelete.length === 0) {
    console.log('No recipes to delete!')
    return
  }

  console.log(`Deleting ${recipesToDelete.length} recipes...`)

  await Promise.all(recipesToDelete.map((recipeData) => {
    console.log(`  - ${recipeData.filePath}`)
    return new Promise(resolve => 
      fs.rm(recipeData.filePath, () => resolve())
    )
  }))
}

async function handleUpdates(recipesToUpdate) {
  if (recipesToUpdate.length === 0) {
    console.log('No recipes to update!')
    return
  }

  console.log(`Updating ${recipesToUpdate.length} recipes...`)
}

async function run() {
  const syncedRecipes = await getAllRecipes()
  const { 
    toDelete,
    toUpdate,
    toCreate,
    noOp
  } = getChanges(syncedRecipes)
  
  await handleDeletes(toDelete)
  await handleUpdates(toUpdate)
  await handleCreates(toCreate)

  console.log(`${noOp.length} recipes require no updates`)
}

run()
