#!/usr/bin/env node
const fs = require("fs");
const crypto = require("crypto");
const https = require("https");
const FormData = require("form-data");
const {
  startProcess,
  CATALOG_DIRECTORY,
  CATALOG_METADATA,
  METADATA_PROFILE_DIRECTORY,
} = require("./utils");

const DDW_API = "https://api.data.world/v0";
const UPLOAD_DATASET = "recipebox/ddw-catalogs";
const UPLOAD_PATH = `uploads/${UPLOAD_DATASET}/files`;

const HEADERS = {
  Accept: "application/json",
  Authorization: `Bearer ${process.env.DDW_TOKEN}`,
};

function uploadFiles(filePaths) {
  return new Promise((resolve, reject) => {
    const form = new FormData();

    filePaths.forEach((filePath) => {
      form.append("file", fs.createReadStream(filePath));
    });

    const req = https.request(
      `${DDW_API}/${UPLOAD_PATH}`,
      { headers: { ...HEADERS, ...form.getHeaders() }, method: "POST" },
      (res) => {
        let rawData = "";
        if (res.statusCode !== 200) {
          reject(`${res.statusCode}, ${res.statusMessage}`);
          return;
        }
        res.on("data", (d) => {
          rawData += d;
        });
        res.on("end", () => {
          resolve(JSON.parse(rawData));
        });
      }
    );

    form.pipe(req);
  });
}

function getFilesToUpload() {
  // Copy metadata profile files into catalog directory
  fs.readdirSync(METADATA_PROFILE_DIRECTORY)
    .filter((filePath) => filePath.endsWith(".ttl"))
    .map((filePath) => {
      fs.copyFileSync(
        `${METADATA_PROFILE_DIRECTORY}/${filePath}`,
        `${CATALOG_DIRECTORY}/${filePath}`
      );
    });

  const ttlFiles = fs
    .readdirSync(CATALOG_DIRECTORY)
    .filter((filePath) => filePath.endsWith(".ttl"))
    .map((filePath) => `${CATALOG_DIRECTORY}/${filePath}`);

  return ttlFiles;
}

async function uploadCatalog() {
  const ttlFiles = getFilesToUpload();

  console.log(
    `Uploading to ${UPLOAD_DATASET}:`,
    ttlFiles.map((file) => `\n- ${file}`).join("")
  );

  try {
    await uploadFiles(ttlFiles);
    console.log(`✅ Successfully uploaded ${ttlFiles.length} files!`);
  } catch (err) {
    console.error("Could not upload files:", err);
    process.exit(1);
  }
}

function checkHash() {
  let lastHash = null;

  if (fs.existsSync(CATALOG_METADATA)) {
    const { catalogHash } = JSON.parse(fs.readFileSync(CATALOG_METADATA));

    lastHash = catalogHash;
  }

  console.log("-- Previous hash:", lastHash);

  const hashSum = crypto.createHash("sha256");

  fs.readdirSync(CATALOG_DIRECTORY)
    .filter((file) => file.endsWith(".ttl"))
    .forEach((file) =>
      hashSum.update(fs.readFileSync(`${CATALOG_DIRECTORY}/${file}`))
    );

  const currentHash = hashSum.digest("base64");

  if (lastHash === currentHash) {
    console.log(
      "\n✅ No changes to catalog files were made, so no upload is needed."
    );
    process.exit(0);
  }

  console.log(`-- Saving current hash: ${currentHash}\n`);

  fs.writeFileSync(
    CATALOG_METADATA,
    JSON.stringify({ catalogHash: currentHash }, null, 2)
  );
}

async function run() {
  startProcess("Upload to DDW");
  checkHash();
  uploadCatalog();
}

run();
